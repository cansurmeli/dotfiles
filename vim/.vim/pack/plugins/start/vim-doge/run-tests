#!/usr/bin/env bash
# Copyright (c) 2016-2019, w0rp <devw0rp@gmail.com> {{{
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.  2. Redistributions in binary
# form must reproduce the above copyright notice, this list of conditions and
# the following disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# }}}

# For more info about the 'set' command, see
# https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin
set -e
set -u

docker_image=kkoomen/doge
current_docker_image_id=3cb68206d4a8
DOGE_DOCKER_IMAGE="$docker_image"
export DOGE_DOCKER_IMAGE

verbose_flag=''
verbose=0
run_vim_74_tests=1
run_vim_81_tests=1
run_neovim_02_tests=1
run_neovim_04_tests=1
run_linter=1

red='\033[0;31m'
green='\033[0;32m'
blue='\033[0;34m'
nc='\033[0m'

while [ $# -ne 0 ]; do
  case $1 in
  -v)
      verbose_flag='-v'
      verbose=1
      shift
  ;;
  --vim-only)
    run_linter=0
    run_neovim_02_tests=0
    run_neovim_04_tests=0
    shift
  ;;
  --vim-74-only)
    run_linter=0
    run_vim_81_tests=0
    run_neovim_02_tests=0
    run_neovim_04_tests=0
    shift
  ;;
  --vim-81-only)
    run_linter=0
    run_vim_74_tests=0
    run_neovim_02_tests=0
    run_neovim_04_tests=0
    shift
  ;;
  --neovim-only)
    run_linter=0
    run_vim_74_tests=0
    run_vim_81_tests=0
    shift
  ;;
  --neovim-02-only)
    run_linter=0
    run_vim_74_tests=0
    run_vim_81_tests=0
    run_neovim_04_tests=0
    shift
  ;;
  --neovim-04-only)
    run_linter=0
    run_vim_74_tests=0
    run_vim_81_tests=0
    run_neovim_02_tests=0
    shift
  ;;
  --linter-only)
    run_vim_74_tests=0
    run_vim_81_tests=0
    run_neovim_02_tests=0
    run_neovim_04_tests=0
    shift
  ;;
  --help)
      echo 'Usage: ./run-tests [OPTION]... [FILE]...'
      echo
      echo 'Filenames can be given as arguments to run a subset of tests.'
      echo 'For example: ./run-tests test/filetypes/python/functions.vader test/filetypes/java/class-methods.vader'
      echo
      echo 'Options:'
      echo '  -v                Enable verbose output'
      echo '  --vim-only        Run tests only for Vim 8.0 and 8.1'
      echo '  --vim-74-only     Run tests only for Vim 7.4'
      echo '  --vim-81-only     Run tests only for Vim 8.1'
      echo '  --neovim-only     Run tests only for NeoVim 0.2 and 0.3'
      echo '  --neovim-02-only  Run tests only for NeoVim 0.2'
      echo '  --neovim-04-only  Run tests only for NeoVim 0.4'
      echo '  --linters-only    Run only Vint'
      echo '  --help            Show this help text'
      echo '  --                Stop parsing options after this'
      exit 0
  ;;
  --)
      shift
      break
  ;;
  -?*)
      echo "Invalid argument: $1" 1>&2
      exit 1
  ;;
  *)
      break
  ;;
  esac
done

# Allow tests to be passed as arguments.
if [ $# -ne 0 ]; then
  tests="$*"

  # Do not run any other tools when targeting specific tests.
  run_linter=0
else
  tests="test/*.vader test/commands/*.vader test/options/*.vader test/filetypes/*/*.vader"
fi

# Delete .swp files in the test directory, which cause Vim 8 to hang.
find test -name '*.swp' -delete

docker images -q $DOGE_DOCKER_IMAGE | grep "^$current_docker_image_id" > /dev/null \
  || docker pull "$docker_image"

output_dir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')

trap '{ rm -rf "$output_dir"; }' EXIT

# Used for killing tests when you kill the script.
cancel_tests() {
  set +e

  if [ -n "$pid_list" ]; then
    for pid in $pid_list; do
      kill "$pid"
      wait "$pid"
    done
  fi

  docker kill $(docker ps -a -q --filter ancestor="$docker_image" --format='{{.ID}}') &> /dev/null

  if [ -d "$output_dir" ]; then
    rm -rf "$output_dir"
  fi

  echo
  exit 1
}

trap cancel_tests INT TERM

file_number=0
pid_list=''
for vim in $(docker run --rm "$DOGE_DOCKER_IMAGE" ls /vim-build/bin | grep '^neovim\|^vim'); do
  if ( [[ $vim =~ ^vim-v7.4 ]] && ((run_vim_74_tests)) ) \
  || ( [[ $vim =~ ^vim-v8.1 ]] && ((run_vim_81_tests)) ) \
  || ( [[ $vim =~ ^neovim-v0.2 ]] && ((run_neovim_02_tests)) ) \
  || ( [[ $vim =~ ^neovim-v0.4 ]] && ((run_neovim_04_tests)) ); then
    echo "Starting Vim: $vim..."
    file_number=$((file_number+1))
    scripts/run-vader-tests $verbose_flag "$vim" "$tests" > "$output_dir/$file_number" 2>&1 &
    pid_list="$pid_list $!"
  fi
done

if ((run_linter)); then
  echo "Starting Vint..."
  file_number=$((file_number+1))
  scripts/run-vint > "$output_dir/$file_number" 2>&1 &
  pid_list="$pid_list $!"
fi

echo

failed=0
index=0

for pid in $pid_list; do
  this_failed=0
  index=$((index+1))

  if ! wait "$pid"; then
    failed=1
    this_failed=1
  fi

  if ( [[ -f "$output_dir/$index" ]] && ((this_failed)) ) || ((verbose)); then
    cat "$output_dir/$index"
  fi
done

if ((failed)); then
  echo -en "$red"
  echo '✖ Something went wrong!'
  if !((verbose)); then
    echo -en "$blue"
    echo 'Use -v to show all output'
  fi
else
  echo -en "$green"
  echo '✔ All tests passed!'
fi
echo -en "$nc"

exit $failed
