#!/usr/bin/env bash
# Copyright (c) 2016-2019, w0rp <devw0rp@gmail.com> {{{
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.  2. Redistributions in binary
# form must reproduce the above copyright notice, this list of conditions and
# the following disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# }}}

# For more info about the 'set' command, see
# https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin
set -e
set -u

verbose=0
while [ $# -ne 0 ]; do
  case $1 in
  -v)
      verbose=1
      shift
  ;;
  --)
      shift
      break
  ;;
  -?*)
      echo "Invalid argument: $1" 1>&2
      exit 1
  ;;
  *)
      break
  ;;
  esac
done

vim="$1"
tests="$2"

red='\033[0;31m'
green='\033[0;32m'
blue='\033[0;34m'
nc='\033[0m'

run_file="$(mktemp -t tests_ran.XXXXXXXX)"


function filter-vader-output() {
  local hit_first_vader_line=0
  # When verbose mode is off, suppress output until Vader starts.
  local start_output="$verbose"
  local filtered_data=''

  while read -r; do
    # Search for the first Vader output line.
    # We can try starting tests again if they don't start.
    if ((!hit_first_vader_line)); then
      if [[ "$REPLY" = *'Starting Vader:'* ]]; then
        hit_first_vader_line=1
      fi
    fi

    if ((!start_output)); then
      if ((hit_first_vader_line)); then
        start_output=1
      else
        continue
      fi
    fi

    echo "$REPLY"
  done

  # Note that we managed to get the Vader tests started if we did.
  if ((hit_first_vader_line)); then
    echo 1 > "$run_file"
  fi
}

function color-vader-output() {
  while read -r; do
    # Split blocks by echoing an extra white line.
    if [[ "$REPLY" = *'GIVEN]'* ]]; then
      echo
    fi

    if [[ "$REPLY" = *'(X)'* ]]; then
      echo -en "$red"
    elif [[ "$REPLY" = *'Starting Vader:'* ]]; then
      echo -en "$blue"
    else
      echo -en "$nc"
    fi

    if [[ "$REPLY" = *'Success/Total'* ]]; then
      success="$(echo -n "$REPLY" | grep -o '[0-9]\+/' | head -n1 | cut -d/ -f1)"
      total="$(echo -n "$REPLY" | grep -o '/[0-9]\+' | head -n1 | cut -d/ -f2)"

      if [ "$success" -lt "$total" ]; then
        echo -en "$red"
      else
        echo -en "$green"
      fi

      echo "$REPLY"
      echo -en "$nc"
      echo
    else
      echo "$REPLY"
    fi
  done

  echo -en "$nc"
}

echo
echo '========================================'
echo "Running tests for $vim"
echo '========================================'
echo

tries=0

while [ "$tries" -lt 5 ]; do
  tries=$((tries + 1))

  echo "tests: $tests"
  exit_code=0
  set -o pipefail
  docker run \
    -a stderr \
    -e VADER_OUTPUT_FILE=/dev/stderr \
    --rm \
    -v "$PWD:/testplugin" \
    -v "$PWD/test:/home" \
    -w /testplugin "$DOGE_DOCKER_IMAGE" \
    "/vim-build/bin/$vim" -u test/vimrc "+Vader! $tests" 2>&1 | filter-vader-output | color-vader-output || exit_code=$?
  set +o pipefail

  if [ -s "$run_file" ]; then
    break
  fi
done

if [ "$tries" -gt 1 ]; then
  echo
  echo "Tried to run tests $tries times"
fi

rm "$run_file"

exit "$exit_code"
