# ==============================================================================
#
#                      Test the DogeCreateDocStandard command
#
# ==============================================================================

Execute (Create a new doc standard based on ldoc, setup dummy pattern and execute the DogeCreateDocStandard command):
  enew
  setfiletype lua
  let b:doge_patterns = {
    \  'ldoc': [{
    \    'match': '\m^\%(local\s*\)\?function\s*\%([[:alnum:]_:.]\+[:.]\)\?\%([[:alnum:]_]\+\)\s*(\(.\{-}\))',
    \    'tokens': ['parameters'],
    \    'parameters': {
    \      'match': '\m\([^,]\+\)',
    \      'tokens': ['name'],
    \      'format': '@param {name} !description',
    \    },
    \    'insert': 'above',
    \    'template': [
    \      '-- !summary',
    \      '-- !description',
    \      '%(parameters|-- {parameters})%',
    \    ],
    \  }],
    \}
  DogeCreateDocStandard ldoc

Then (Expect a file to be created with specific content):
"   AssertEqual expand('~/.vim/after/ftplugin/lua.vim'), expand('%:p')

  let b:content = join([
  \  '" Preserve existing doge settings.',
  \  "let b:doge_patterns = get(b:, 'doge_patterns', {})",
  \  "let b:doge_supported_doc_standards = get(b:, 'doge_supported_doc_standards', [])",
  \  "if index(b:doge_supported_doc_standards, 'ldoc_custom') < 0",
  \  "  call add(b:doge_supported_doc_standards, 'ldoc_custom')",
  \  "endif",
  \  '',
  \  '" Set the new doc standard as default.',
  \  "let b:doge_doc_standard = 'ldoc_custom'",
  \  '',
  \  '" Ensure we do not overwrite an existing doc standard.',
  \  "if !has_key(b:doge_patterns, 'ldoc_custom')",
  \  "  let b:doge_patterns['ldoc_custom'] = [",
  \  "        \\  {",
  \  "        \\    'match': '\\m^\\%(local\\s*\\)\\?function\\s*\\%([[:alnum:]_:.]\\+[:.]\\)\\?\\%([[:alnum:]_]\\+\\)\\s*(\\(.\\{-}\\))',",
  \  "        \\    'tokens': ['parameters'],",
  \  "        \\    'parameters': {",
  \  "        \\      'match': '\\m\\([^,]\\+\\)',",
  \  "        \\      'tokens': ['name'],",
  \  "        \\      'format': '@param {name} !description',",
  \  "        \\    },",
  \  "        \\    'insert': 'above',",
  \  "        \\    'template': [",
  \  "        \\      '-- !summary',",
  \  "        \\      '-- !description',",
  \  "        \\      '%(parameters|-- {parameters})%',",
  \  "        \\    ],",
  \  "        \\  },",
  \  "        \\]",
  \  "endif",
  \], "\n")
  AssertEqual b:content, join(getline(line('^'), line('$')), "\n")
  unlet b:content
# Remove the buffer to ensure every test will create a new doc standard file.
  call delete(expand('~/.vim/after/ftplugin/lua.vim'))
  bdelete!
