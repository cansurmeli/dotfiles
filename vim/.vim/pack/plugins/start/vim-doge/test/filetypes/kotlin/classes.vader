# ==============================================================================
# Classes without type parameters without parameters.
# ==============================================================================
Given kotlin (class without type parameters without parameters):
  class MyClass() {}

Do (trigger doge):
  \<C-d>

Expect kotlin (generated comment with nothing but the text 'TODO'):
  /**
   * [TODO:description]
   */
  class MyClass() {}

# ==============================================================================
# Classes with type parameters with parameters.
# ==============================================================================
Given kotlin (class with type parameters with parameters):
  class ResourceLoader<T>(id: ResourceID<T>) {}

Do (trigger doge):
  \<C-d>

Expect kotlin (generated comment with @property tags):
  /**
   * [TODO:description]
   * @property id [TODO:description]
   */
  class ResourceLoader<T>(id: ResourceID<T>) {}

# ==============================================================================
# Classes with type parameters with parameters.
# ==============================================================================
Given kotlin (class without type parameters with parameters):
  class MutableUser(val map: MutableMap<String, Any?>, num: Int) {}

Do (trigger doge):
  \<C-d>

Expect kotlin (generated comment with @property tags):
  /**
   * [TODO:description]
   * @property map [TODO:description]
   * @property num [TODO:description]
   */
  class MutableUser(val map: MutableMap<String, Any?>, num: Int) {}

# ==============================================================================
# Classes: implementing by delegation
# ==============================================================================
Given kotlin (class implementing by delegation):
  class MutableUser(val map: MutableMap<String, Any?>) {}

Do (trigger doge):
  \<C-d>

Expect kotlin (generated comment with @property tags):
  /**
   * [TODO:description]
   * @property map [TODO:description]
   */
  class MutableUser(val map: MutableMap<String, Any?>) {}

# ==============================================================================
# Different class modifiers.
# ==============================================================================
Given kotlin (different class modifiers: inner, inline, data, enum, external, open, abstract, sealed):
  inner class MyClass(val s: String, val n: Int) {}

  inline class MyClass(val s: String, val n: Int) {}

  enum class MyClass(val s: String, val n: Int) {}

  external class MyClass(val s: String, val n: Int) {}

  open data class MyClass(val s: String, val n: Int) {}

  abstract class MyClass(val s: String, val n: Int) {}

  sealed class MyClass(val s: String, val n: Int) {}

Do (trigger doge):
  \<C-d>
  :8\<CR>
  \<C-d>

  :15\<CR>
  \<C-d>

  :22\<CR>
  \<C-d>

  :29\<CR>
  \<C-d>

  :36\<CR>
  \<C-d>

  :43\<CR>
  \<C-d>

Expect kotlin (generated comments with @property tags):
  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  inner class MyClass(val s: String, val n: Int) {}

  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  inline class MyClass(val s: String, val n: Int) {}

  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  enum class MyClass(val s: String, val n: Int) {}

  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  external class MyClass(val s: String, val n: Int) {}

  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  open data class MyClass(val s: String, val n: Int) {}

  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  abstract class MyClass(val s: String, val n: Int) {}

  /**
   * [TODO:description]
   * @property s [TODO:description]
   * @property n [TODO:description]
   */
  sealed class MyClass(val s: String, val n: Int) {}

# ==============================================================================
# Classes: primary constructors with paramaters.
# ==============================================================================
Given kotlin (classes with primary constructors with parameters):
  class Person constructor(firstName: String) {}

  class C private constructor(a: Int) {}

Do (trigger doge):
  \<C-d>
  :7\<CR>
  \<C-d>

Expect kotlin (generated comments with @property tags):
  /**
   * [TODO:description]
   * @property firstName [TODO:description]
   */
  class Person constructor(firstName: String) {}

  /**
   * [TODO:description]
   * @property a [TODO:description]
   */
  class C private constructor(a: Int) {}

# ==============================================================================
# Classes: secondary constructors with paramaters.
# ==============================================================================
Given kotlin (classes with secondary constructors with parameters):
  class MyClass {
    protected constructor(ctx: Context) : super(ctx)

    constructor(parent: Person, query: Query<*, <T>>, users: List<User>) {}
  }

Do (trigger doge):
  :2\<CR>
  \<C-d>
  :8\<CR>
  \<C-d>

Expect kotlin (generated comments with @param tags):
  class MyClass {
    /**
     * [TODO:description]
     * @param ctx [TODO:description]
     */
    protected constructor(ctx: Context) : super(ctx)

    /**
     * [TODO:description]
     * @param parent [TODO:description]
     * @param query [TODO:description]
     * @param users [TODO:description]
     */
    constructor(parent: Person, query: Query<*, <T>>, users: List<User>) {}
  }
