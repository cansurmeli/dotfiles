# ==============================================================================
# Classes without parameters.
# ==============================================================================
Given scala (class without parameters):
  class Test() {
    //
  }

Do (trigger doge):
  \<C-d>

Expect scala (generated comments with nothing but the text 'TODO'):
  /** [TODO:description]
   *
   */
  class Test() {
    //
  }

# ==============================================================================
# Classes with parameters.
# ==============================================================================
Given scala (class with parameters):
  class Test(val x: Double = 0, val y: Double = 0) {
    //
  }

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** [TODO:description]
   *
   * @param x Double [TODO:description]
   * @param y Double [TODO:description]
   */
  class Test(val x: Double = 0, val y: Double = 0) {
    //
  }

# ==============================================================================
# Classes with the 'extends' keyword.
# ==============================================================================
Given scala (class with parameters that contains the 'extends' keyword):
  class Test(val x: Double = 0, val y: Double = 0) extends A {
    //
  }

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** [TODO:description]
   *
   * @param x Double [TODO:description]
   * @param y Double [TODO:description]
   */
  class Test(val x: Double = 0, val y: Double = 0) extends A {
    //
  }

# ==============================================================================
# Classes with the 'with' keyword.
# ==============================================================================
Given scala (class with parameters that contains the 'with' keyword):
  class Test(val x: Double = 0, val y: Double = 0) with A {
    //
  }

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** [TODO:description]
   *
   * @param x Double [TODO:description]
   * @param y Double [TODO:description]
   */
  class Test(val x: Double = 0, val y: Double = 0) with A {
    //
  }

# ==============================================================================
# Classes with the 'extends' and 'with' keywords.
# ==============================================================================
Given scala (class with parameters that contains the 'extends' and 'with' keywords):
  class Test(val x: Double = 0, val y: Double = 0) extends A with B with C {
    //
  }

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** [TODO:description]
   *
   * @param x Double [TODO:description]
   * @param y Double [TODO:description]
   */
  class Test(val x: Double = 0, val y: Double = 0) extends A with B with C {
    //
  }

# ==============================================================================
# Classes that extends another class that contains a type hint.
# ==============================================================================
Given scala (class that extends another class that contains a type hint):
  class IntIterator(to: Int) extends Iterator[Int] {
    //
  }

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param tag):
  /** [TODO:description]
   *
   * @param to Int [TODO:description]
   */
  class IntIterator(to: Int) extends Iterator[Int] {
    //
  }

# ==============================================================================
# Classes without a body
# ==============================================================================
Given scala (class without a body containing the 'extends' keyword):
  class Dog(val name: String) extends Pet

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param tag):
  /** [TODO:description]
   *
   * @param name String [TODO:description]
   */
  class Dog(val name: String) extends Pet

# ==============================================================================
# Case-classes.
# ==============================================================================
Given scala (private case-class with parameters that contains the 'extends' keyword):
  private case class GUISat(amount_msat: Long) extends BtcAmountGUILossless {}

Do (trigger doge):
  \<C-d>

Expect scala (generated comment with @param and @return tags):
  /** [TODO:description]
   *
   * @param amount_msat Long [TODO:description]
   */
  private case class GUISat(amount_msat: Long) extends BtcAmountGUILossless {}
