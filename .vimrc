
call plug#begin()
"emmet-vim is a vim plug-in which provides support for expanding abbreviations
"similar to emmet.
Plug 'mattn/emmet-vim'

" Distinct highlighting of keywords vs values, JSON-specific (non-JS)
" warnings, quote concealing.
Plug 'elzr/vim-json'

"Add CSS3 syntax support to Vim's built-in syntax/css.vim.
Plug 'hail2u/vim-css3-syntax'

" TENDER: A 24bit colorscheme for Vim, Airline and Lightline (generated by
" Estilo)
Plug 'jacoborus/tender'

" NERD COMMENTER: Comment functions so powerfulâ€”no comment necessary.
Plug 'scrooloose/nerdcommenter'

" vim-css-color: A very fast color keyword highlighter for Vim with
" context-sensitive support for many language syntaxes.
Plug 'ap/vim-css-color'

" Syntastic: syntax checking
Plug 'scrooloose/syntastic'

" vim-toml: Vim Syntax for TOML
Plug 'cespare/vim-toml'

" VIM-AIRLINE: Lean & mean status/tabline for vim that's light as air.
Plug 'bling/vim-airline'

" Solarized Color Scheme
Plug 'altercation/vim-colors-solarized'

" CTRLP: Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
Plug 'kien/ctrlp.vim'

" YouCompleteMe: A code completion engine for Vim
"Plug 'valloric/youcompleteme'

" html5.vim: HTML5 omnicomplete and syntax
Plug 'othree/html5.vim'

" vim-arduino-syntax: Arduino syntax files
Plug 'sudar/vim-arduino-syntax'

" ag: search using the silver searcher
Plug 'ervandew/ag'

" swift: Swift support including syntax, indenting and more through Syntastic
Plug 'keith/swift.vim' 

" vim-xcode: partial Xcode support
Plug 'gfontenot/vim-xcode'

" fugitive: an awesome Git wrapper
Plug 'tpope/vim-fugitive'

" vim-slim: slim syntax highlighting for VIM
Plug 'slim-template/vim-slim'

" vim-arduino: vim plugin for compiling and uploading arduino sketches
Plug 'stevearc/vim-arduino'

" vim-gitgutter: A Vim plugin which shows a git diff in the gutter(sign column) and stages/undoes hunks.
Plug 'airblade/vim-gitgutter'

" SwiftDoc: generate markup for Swift functions
Plug 'https://github.com/aciidb0mb3r/SwiftDoc.vim'

" SwiftPlayground: Plat with Swift code in Vim
Plug 'https://github.com/jerrymarino/SwiftPlayground.vim'

" vim-pbxproj: Syntax highlighting for pbxproj files in Vim.
Plug 'cfdrake/vim-pbxproj'

" vim-rdf: A bundle of vimfiles for editing RDF data(syntaxes, completion,
" etc.)
Plug 'niklasl/vim-rdf'

" Tabular: Vim script for text filtering and alignment
Plug 'godlygeek/tabular'

" vim-octave:  Syntax highlighting for GNU Octave
Plug 'jvirtanen/vim-octave'

" neco-ghc: A completion plugin for Haskell, usign ghc-mod
Plug 'eagletmt/neco-ghc'

" clang complete: A Vim plugin that use clang for completing C/C++ code.
Plug 'rip-rip/clang_complete'

" Vim Game : Snake
Plug 'johngrib/vim-game-snake'

" AutoClose: This plugin for Vim enable an auto-close chars feature for you.
"Plug 'townk/vim-autoclose'

call plug#end()

" Apply Arduino syntax to the correct files
au BufRead,BufNewFile *.pde set filetype=arduino
au BufRead,BufNewFile *.ino set filetype=arduino

" RESOURCES
" https://dougblack.io/words/a-good-vimrc.html

" COLORS
syntax enable						" enable syntax processing
"set background=dark			" choose the dark option of the solarized theme
"colorscheme solarized		" use the solarized theme

" SPACES & TABS
set tabstop=2						" number of visual spaces per TAB
set shiftwidth=2				" number of space characters inserted for indentation
set softtabstop=2				" number of spaces in a tab while editing
set noexpandtab					" tabs are tabs, not spaces

" UI CONFIG
set number							" show line numbers
set cursorline					" highlight current line
set wildmenu						" visual autocomplete for the command menu
set lazyredraw					" redraw only when we need to
set showmatch						" highlight matching [{()}]
set noshowmode					" do not display the current mode as there is vim-airline

" LEADER SHORTCUTS
let mapleader=","				" leader is comma

" SEARCHING
set incsearch						" search as characters are entered
set hlsearch						" highlight matches
nnoremap <leader><space> :nohlsearch<CR>		" stop search highlighting map to ,<space>

" FOLDING
set foldenable					" enable folding

" MISC
set backspace=2

" Syntastic Recommended Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_w = 1

let g:syntastic_swift_checkers = ['swiftpm', 'swiftlint']		" from swift.vim

" vim-airline configuration
set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#tabline#enabled = 1 " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Show just the filename for the buffers

" vim-fastlane: Enable syntax highlighting for fastlane configuration files in
" vim
" https://github.com/milch/vim-fastlane
au BufNewFile,BufRead Appfile set ft=ruby
au BufNewFile,BufRead Deliverfile set ft=ruby
au BufNewFile,BufRead Fastfile set ft=ruby
au BufNewFile,BufRead Gymfile set ft=ruby
au BufNewFile,BufRead Matchfile set ft=ruby
au BufNewFile,BufRead Snapfile set ft=ruby
au BufNewFile,BufRead Scanfile set ft=ruby

" vim-arduino
let g:arduino_board = 'arduino:avr:mega2560'
let g:arduino_programmer = 'arduino:avrisp'

" Enable Omni Completion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" neco-ghc: Haskell plugin
let g:ycm_semantic_triggers = {'haskell' : ['.']} " enables auto-completion
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" clang complete
let g:clang_library_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
set conceallevel=2
set concealcursor=vin
let g:clang_snippets=1
let g:clang_conceal_snippets=1
let g:clang_snippets_engine='clang_complete'

" Complete options (disable preview scratch window, longest removed to aways show menu)
set completeopt=menu,menuone

" Limit popup menu height
set pumheight=20

" SuperTab completion fall-back 
let g:SuperTabDefaultCompletionType='<c-x><c-u><c-p>'



 " Command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" If no errors, it closes any open cwindow.
" http://vim.wikia.com/wiki/Automatically_open_the_quickfix_window_on_:make
command -nargs=* Make make <args> | cwindow 4
:map <Leader>c :Make<CR>

" BUFFER MANAGEMENT
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>p :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" force write a non-sudo opened file via `:w!!` (type in a fast manner)
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Use system clipboard as the default one
set clipboard=unnamed

" centralised swapfiles
set directory^=$HOME/.vim/swapfiles//

" Save a file without root permission
" https://www.cyberciti.biz/faq/vim-vi-text-editor-save-file-without-root-permission/
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Split to the right
set splitright

" Emmet | redefine trigger key
let g:user_emmet_leader_key='<C-Z>'



" Auto closing an HTML tag
" http://vim.wikia.com/wiki/Auto_closing_an_HTML_tag

" Making Parenthesis And Brackets Handling Easier
" http://vim.wikia.com/wiki/Making_Parenthesis_And_Brackets_Handling_Easier
inoremap ( ()<Esc>i

inoremap ( ()<Esc>:let leavechar=")"<CR>i
inoremap [ []<Esc>:let leavechar="]"<CR>i
imap <C-j> <Esc>:exec "normal f" . leavechar<CR>a
